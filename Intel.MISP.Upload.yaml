name: Custom.Intel.MISP.Upload
description: |
        This server artifact should be used in conjunction with the Intel.MISP client monitoring artifact(s). It is used to grab the latest list of indicators from MISP so they can be used for realtime monitoring of hosts.

        The server metadata store can be used to store the value for MISPKey so that it is not stored inside of the artifact itself.
        
type: SERVER_EVENT
author: Wes Lambert - @therealwlambert
parameters:
  - name: MISPURL
    default: https://MISP
    description: MISP Server URL
  - name: MISPKey
    default: ''
    description: MISP API Key
  - name: MISPMaxDays
    default: '90d'
    description: "Export indicators for the specified period [dmh] (default is 90d)"
  - name: IndicatorsName
    description: Name of indicator filename
    default: indicators
  - name: IndicatorInterval
    type: int
    description: Interval between indicator list retrieval (default is 1 hr)
    default: "3600"

sources:
      - query: |
                LET misp_key = if (
                    condition=MISPKey,
                    then=MISPKey,
                    else=server_metadata().MISPKey)
                  
                LET misp_days = if (
                    condition = MISPMaxDays,
                    then=MISPMaxDays,
                    else = server_metadata().MISPMaxDays)
             
                LET Data = SELECT Content FROM http_client(
                data=serialize(item=dict(
                    returnFormat='csv',
                    last=misp_days,
                    enforceWarninglist=True,
                    to_ids=True,
                    category='Network activity',
                    requested_attributes=array(a1='event_id',a2='category',a3='value'),
                    format="json")),
                    headers=dict(`Authorization`=misp_key, `Content-type`='application/json', `Accept`='application/json'),
                    disable_ssl_security=True,
                    method="POST", 
                    url=MISPURL + '/attributes/restSearch',
                    tempfile_extension=".csv")
             
                LET VRPath = SELECT regex_replace(re='''^[/?]*''', replace="", source=dirname(path=file_store(path="/public/x"))) AS Path FROM scope()  
                
                LET UploadIndicators = SELECT upload_directory(
                    accessor='file', 
                    file=Data.Content, 
                    name=IndicatorsName, 
                    output=VRPath.Path) 
                AS IntelUploadDetails 
                FROM scope()
                
                SELECT * FROM chain(
                    a={SELECT * FROM UploadIndicators},
                    b={SELECT * FROM foreach(row={SELECT * FROM clock(period=IndicatorInterval)}, query=UploadIndicators)}
                    )
                
