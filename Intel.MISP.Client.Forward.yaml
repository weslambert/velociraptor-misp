name: Custom.Intel.MISP.Client.Forward
description: |
      This client event artifact will monitor for DNS queries, communication from/to IP addresses, and file hashes on a host in real-time.  Indicators are downloaded by the server at a configurable interval, then the server processes the results from the clients to see if there are matches.  
      
      The artifact uses the following backend services to obtain this information:
      
        - DNS: DNS ETW Provider (`{1C95126E-7EEA-49A9-A3FE-A378B03DDB4D}`)
        - IP: TCP/IP ETW Provider (`{2F07E2EE-15DB-40F1-90EF-9D7BA282188A}`)
        - Hash: Usn Journal
      
type: CLIENT_EVENT
parameters:
  - name: PathRegex
    description: A regex to match the entire path (you can watch a directory or a file type).
    default: .txt$

  - name: Device
    description: The NTFS drive to watch
    default: C:\\

  - name: UsnCheckPeriod
    type: int
    description: Dedup all file operations that occur within this period
    default: "10"
  
  - name: EtwCheckPeriod
    type: int
    description: Dedup all file operations that occur within this period
    default: "10"
 
  - name: CSVUrl
    description: Indicator URL
    default: 'C:\Users\wlambert\AppData\Local\Temp\public\indicators'

sources:
    - name: IPFind
      queries:
        - |
            LET RIP = SELECT split(string=EventData.RemoteAddress, sep=':')[0] AS RemoteIP,
                         split(string=EventData.RemoteAddress, sep=':')[1] AS RemotePort,
                         split(string=EventData.LocalAddress, sep=':')[0] AS LocalIP,
                         split(string=EventData.LocalAddress, sep=':')[1] AS LocalPort
                  // Watch TCPIP Provider
                  FROM watch_etw(guid="{2F07E2EE-15DB-40F1-90EF-9D7BA282188A}") WHERE System.Task = 1300 AND NOT EventData.RemoteAddress =~ '127.0.0.1|0.0.0.0'
        - |
            LET DedupedRIP = SELECT * FROM foreach(row={
                SELECT * FROM clock(period=EtwCheckPeriod)
            },
            query={
                -- Each time the fifo is accessed we pull all the rows and
                -- dedup the path, then clear the cache.
                SELECT * FROM fifo(
                    query=RIP,
                    max_rows=5000,
                    max_age=6000, flush=TRUE)
                GROUP BY RemotePort
            })
        - |
            SELECT * FROM foreach(row=DedupedRIP)
        
    - name: DomainFind
      queries:
        - |
            LET Domain = SELECT System.TimeStamp AS Timestamp,
               EventData.QueryName AS Query
            FROM watch_etw(guid="{1C95126E-7EEA-49A9-A3FE-A378B03DDB4D}")
            WHERE System.ID = 3020

        - |
            LET DedupedDomains = SELECT * FROM foreach(row={
                SELECT * FROM clock(period=EtwCheckPeriod)
            },
            query={
                -- Each time the fifo is accessed we pull all the rows and
                -- dedup the path, then clear the cache.
                SELECT * FROM fifo(
                    query=Domain,
                    max_rows=5000,
                    max_age=6000, flush=TRUE)
                GROUP BY Query
            })
            
        - | 
            SELECT * FROM foreach(row=DedupedDomains)
            
    - name: HashFind
      queries:
        - | 
            Let LogThis <= log(message="Monitoring " + Device + PathRegex)
        - | 
            LET file_modifications = SELECT Device + FullPath AS FullPath
            FROM watch_usn(device=Device)
            WHERE FullPath =~ PathRegex

            -- The USN journal may contain multiple entries for the same
            -- file modification (e.g. TRUNCATE followed by APPEND and
            -- CLOSE). We therefore dedup all entries that happen within the
            -- period as a single modification.
        - |
            LET DedupedFiles = SELECT * FROM foreach(row={
                SELECT * FROM clock(period=UsnCheckPeriod)
            },
            query={
                -- Each time the fifo is accessed we pull all the rows and
                -- dedup the path, then clear the cache.
                SELECT * FROM fifo(
                    query=file_modifications,
                    max_rows=5000,
                    max_age=6000, flush=TRUE)
                GROUP BY FullPath
            })
            
        - |
            -- Stat each file that was changed to get its size and hash
            LET Files = SELECT * FROM foreach(row=DedupedFiles,
                query={
                    SELECT FullPath, Size, hash(path=FullPath).MD5 AS MD5Hash, hash(path=FullPath).SHA1 AS SHA1Hash, hash(path=FullPath).SHA256 AS SHA256Hash, now() AS Time
                    FROM stat(filename=FullPath)
                    WHERE Mode.IsRegular
                }, workers=1)

        - | 
            SELECT * FROM foreach(row=Files)
